/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package telas;

import com.sun.glass.events.KeyEvent;
import gamedcheroes.Equipe;
import gamedcheroes.Jogador;
import gamedcheroes.Partida;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import personagens.base.*;
import personagens.controle.PersonagemControle;
import utilitarios.Enumeraveis.*;

public class TelaPartida extends javax.swing.JFrame {

    Partida partida;
    PersonagemControle personagemControle = new PersonagemControle();
    Float efetividade = (float) 0;

    public TelaPartida() {

    }

    TelaPartida(Partida partida) {
        this.getContentPane().setBackground(Color.white);
        this.partida = partida;
        initComponents();

        partida.getQuemIniciaJogo(TipoJogador.Humano);
        iniciarJogo();

        Personagem personagemSelecionado = (Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem();

        setAcaoParaExecutar(personagemSelecionado, partida.getEquipeJogador());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupJogar = new javax.swing.ButtonGroup();
        jMenu1 = new javax.swing.JMenu();
        jLabelImagemJogadorHumano = new javax.swing.JLabel();
        jLabelImagemJogadorMaquina = new javax.swing.JLabel();
        jLabelEquipeJogadorHumano = new javax.swing.JLabel();
        jLabelNomeEquipeJogadorHumano = new javax.swing.JLabel();
        jLabelX = new javax.swing.JLabel();
        jSeparatorSuperior = new javax.swing.JSeparator();
        jComboBoxPersonagemJogadorHumano = new javax.swing.JComboBox();
        jComboBoxPersonagemJogadorMaquina = new javax.swing.JComboBox();
        jLabelEquipeJogadorMaquina = new javax.swing.JLabel();
        jLabelNomeEquipeJogadorMaquina = new javax.swing.JLabel();
        jLabelTextoAlinhamentoEquipeHumano = new javax.swing.JLabel();
        jLabelTextoClasseEquipeHumano = new javax.swing.JLabel();
        jLabelTextoDanoEquipeHumano = new javax.swing.JLabel();
        jLabelTextoResistenciaEquipeHumano = new javax.swing.JLabel();
        jLabelTextoQtdeVidaEquipeHumano = new javax.swing.JLabel();
        jLabelAlinhamentoEquipeHumano = new javax.swing.JLabel();
        jLabelClasseEquipeHumano = new javax.swing.JLabel();
        jLabelDanoEquipeHumano = new javax.swing.JLabel();
        jLabelResistenciaEquipeHumano = new javax.swing.JLabel();
        jLabelQtdeVidaEquipeHumano = new javax.swing.JLabel();
        jLabelTextoAlinhamentoEquipeMaquina = new javax.swing.JLabel();
        jLabelTextoClasseEquipeMaquina = new javax.swing.JLabel();
        jLabelTextoDanoEquipeMaquina = new javax.swing.JLabel();
        jLabelTextoResistenciaEquipeMaquina = new javax.swing.JLabel();
        jLabelTextoQtdeVidaEquipeMaquina = new javax.swing.JLabel();
        jLabelAlinhamentoEquipeMaquina = new javax.swing.JLabel();
        jLabelClasseEquipeMaquina = new javax.swing.JLabel();
        jLabelDanoEquipeMaquina = new javax.swing.JLabel();
        jLabelResistenciaEquipeMaquina = new javax.swing.JLabel();
        jLabelQtdeVidaEquipeMaquina = new javax.swing.JLabel();
        jRadioButtonAtacar = new javax.swing.JRadioButton();
        jRadioButtonCurar = new javax.swing.JRadioButton();
        jScrollPaneLog = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jButtonJogar = new javax.swing.JButton();
        jLabelTurnoJogador = new javax.swing.JLabel();
        jLabelTurnoComputador = new javax.swing.JLabel();
        jProgressBarHumano = new javax.swing.JProgressBar();
        jProgressBarComputador = new javax.swing.JProgressBar();
        jMenuBarOpcoes = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jReiniciarJogoMi = new javax.swing.JMenuItem();
        jSeparator = new javax.swing.JPopupMenu.Separator();
        jSairMI = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabelImagemJogadorHumano.setText("jLabelImagem");

        jLabelImagemJogadorMaquina.setText("jLabelImagem");

        jLabelEquipeJogadorHumano.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabelEquipeJogadorHumano.setForeground(java.awt.Color.blue);
        jLabelEquipeJogadorHumano.setText("Equipe:");

        jLabelNomeEquipeJogadorHumano.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabelNomeEquipeJogadorHumano.setForeground(java.awt.Color.blue);
        jLabelNomeEquipeJogadorHumano.setText("Jogador Humano");

        jLabelX.setText("jLabelX");

        jSeparatorSuperior.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jComboBoxPersonagemJogadorHumano.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPersonagemJogadorHumano.setToolTipText("");
        jComboBoxPersonagemJogadorHumano.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPersonagemJogadorHumanoItemStateChanged(evt);
            }
        });

        jComboBoxPersonagemJogadorMaquina.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxPersonagemJogadorMaquina.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPersonagemJogadorMaquinaItemStateChanged(evt);
            }
        });

        jLabelEquipeJogadorMaquina.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabelEquipeJogadorMaquina.setForeground(java.awt.Color.orange);
        jLabelEquipeJogadorMaquina.setText("Equipe:");

        jLabelNomeEquipeJogadorMaquina.setFont(new java.awt.Font("Comic Sans MS", 0, 24)); // NOI18N
        jLabelNomeEquipeJogadorMaquina.setForeground(java.awt.Color.orange);
        jLabelNomeEquipeJogadorMaquina.setText("Computador");

        jLabelTextoAlinhamentoEquipeHumano.setText("Alinhamento:");

        jLabelTextoClasseEquipeHumano.setText("Classe:");

        jLabelTextoDanoEquipeHumano.setText("Dano:");

        jLabelTextoResistenciaEquipeHumano.setText("Resistência:");

        jLabelTextoQtdeVidaEquipeHumano.setText("Qtde. Vida:");

        jLabelQtdeVidaEquipeHumano.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N

        jLabelTextoAlinhamentoEquipeMaquina.setText("Alinhamento:");

        jLabelTextoClasseEquipeMaquina.setText("Classe:");

        jLabelTextoDanoEquipeMaquina.setText("Dano:");

        jLabelTextoResistenciaEquipeMaquina.setText("Resistência:");

        jLabelTextoQtdeVidaEquipeMaquina.setText("Qtde. Vida:");

        jLabelQtdeVidaEquipeMaquina.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N

        jRadioButtonAtacar.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupJogar.add(jRadioButtonAtacar);
        jRadioButtonAtacar.setText("Atacar");
        jRadioButtonAtacar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonAtacarStateChanged(evt);
            }
        });

        jRadioButtonCurar.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroupJogar.add(jRadioButtonCurar);
        jRadioButtonCurar.setText("Curar");
        jRadioButtonCurar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonCurarStateChanged(evt);
            }
        });

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPaneLog.setViewportView(jTextAreaLog);

        jButtonJogar.setText("Jogar");
        jButtonJogar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonJogar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonJogarMouseClicked(evt);
            }
        });
        jButtonJogar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButtonJogarKeyPressed(evt);
            }
        });

        jLabelTurnoJogador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/TurnoJogador.png"))); // NOI18N

        jLabelTurnoComputador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/TurnoComputador.png"))); // NOI18N
        jLabelTurnoComputador.setText("]");

        jProgressBarComputador.setToolTipText("");
        jProgressBarComputador.setName(""); // NOI18N
        jProgressBarComputador.setString("");

        jMenu2.setText("Arquivo");

        jReiniciarJogoMi.setText("Reiniciar");
        jReiniciarJogoMi.setToolTipText("");
        jReiniciarJogoMi.setName(""); // NOI18N
        jReiniciarJogoMi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jReiniciarJogoMiMouseClicked(evt);
            }
        });
        jReiniciarJogoMi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReiniciarJogoMiActionPerformed(evt);
            }
        });
        jReiniciarJogoMi.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jReiniciarJogoMiKeyPressed(evt);
            }
        });
        jMenu2.add(jReiniciarJogoMi);
        jReiniciarJogoMi.getAccessibleContext().setAccessibleName("JReiniciarJogoMI");

        jMenu2.add(jSeparator);

        jSairMI.setText("Sair");
        jSairMI.setToolTipText("");
        jSairMI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jSairMIMouseClicked(evt);
            }
        });
        jSairMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSairMIActionPerformed(evt);
            }
        });
        jSairMI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSairMIKeyPressed(evt);
            }
        });
        jMenu2.add(jSairMI);
        jSairMI.getAccessibleContext().setAccessibleName("jSairMI");

        jMenuBarOpcoes.add(jMenu2);
        jMenu2.getAccessibleContext().setAccessibleDescription("");

        setJMenuBar(jMenuBarOpcoes);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNomeEquipeJogadorHumano)
                            .addComponent(jLabelEquipeJogadorHumano))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelTurnoJogador, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxPersonagemJogadorHumano, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTextoClasseEquipeHumano)
                                    .addComponent(jLabelTextoAlinhamentoEquipeHumano)
                                    .addComponent(jLabelTextoDanoEquipeHumano)
                                    .addComponent(jLabelTextoResistenciaEquipeHumano)
                                    .addComponent(jLabelTextoQtdeVidaEquipeHumano))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelAlinhamentoEquipeHumano)
                                    .addComponent(jLabelClasseEquipeHumano)
                                    .addComponent(jLabelDanoEquipeHumano)
                                    .addComponent(jLabelResistenciaEquipeHumano)
                                    .addComponent(jLabelQtdeVidaEquipeHumano)))
                            .addComponent(jProgressBarHumano, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelImagemJogadorHumano, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelX, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jSeparatorSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelImagemJogadorMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxPersonagemJogadorMaquina, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabelTextoClasseEquipeMaquina)
                                            .addComponent(jLabelTextoAlinhamentoEquipeMaquina)
                                            .addComponent(jLabelTextoDanoEquipeMaquina)
                                            .addComponent(jLabelTextoResistenciaEquipeMaquina)
                                            .addComponent(jLabelTextoQtdeVidaEquipeMaquina))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelAlinhamentoEquipeMaquina)
                                            .addComponent(jLabelClasseEquipeMaquina)
                                            .addComponent(jLabelDanoEquipeMaquina)
                                            .addComponent(jLabelResistenciaEquipeMaquina)
                                            .addComponent(jLabelQtdeVidaEquipeMaquina)))
                                    .addComponent(jProgressBarComputador, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabelTurnoComputador, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelNomeEquipeJogadorMaquina, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelEquipeJogadorMaquina, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(22, 22, 22))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(406, 406, 406)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRadioButtonAtacar)
                            .addComponent(jRadioButtonCurar)
                            .addComponent(jButtonJogar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(jScrollPaneLog, javax.swing.GroupLayout.PREFERRED_SIZE, 725, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jRadioButtonCurar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonJogar)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparatorSuperior, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelEquipeJogadorMaquina)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelNomeEquipeJogadorMaquina))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabelTurnoJogador, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabelEquipeJogadorHumano)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabelNomeEquipeJogadorHumano)))
                            .addComponent(jLabelTurnoComputador, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelX, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelImagemJogadorMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelImagemJogadorHumano, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButtonAtacar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBoxPersonagemJogadorHumano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jComboBoxPersonagemJogadorMaquina, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabelTextoAlinhamentoEquipeHumano)
                                            .addComponent(jLabelAlinhamentoEquipeHumano))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoClasseEquipeHumano)
                                            .addComponent(jLabelClasseEquipeHumano))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoDanoEquipeHumano)
                                            .addComponent(jLabelDanoEquipeHumano))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoResistenciaEquipeHumano)
                                            .addComponent(jLabelResistenciaEquipeHumano))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoQtdeVidaEquipeHumano)
                                            .addComponent(jLabelQtdeVidaEquipeHumano)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoAlinhamentoEquipeMaquina)
                                            .addComponent(jLabelAlinhamentoEquipeMaquina))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoClasseEquipeMaquina)
                                            .addComponent(jLabelClasseEquipeMaquina))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoDanoEquipeMaquina)
                                            .addComponent(jLabelDanoEquipeMaquina))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoResistenciaEquipeMaquina)
                                            .addComponent(jLabelResistenciaEquipeMaquina))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabelTextoQtdeVidaEquipeMaquina)
                                            .addComponent(jLabelQtdeVidaEquipeMaquina))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jProgressBarComputador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jProgressBarHumano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)))
                .addComponent(jScrollPaneLog, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //<editor-fold defaultstate="collapsed" desc="Eventos">

    private void jComboBoxPersonagemJogadorHumanoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPersonagemJogadorHumanoItemStateChanged
        limpaDefinicoesPersonagemHumano();
        Personagem personagemSelecionado = (Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem();
        setComponentesJogadorHumano(personagemSelecionado);
        if (partida.getTipoJogadorDaVez() == TipoJogador.Humano) {
            jRadioButtonAtacar.setSelected(true);
            habilitarEDesabilitarComboCurar(personagemSelecionado, partida.getEquipeJogador());
        }
    }//GEN-LAST:event_jComboBoxPersonagemJogadorHumanoItemStateChanged

    private void jComboBoxPersonagemJogadorMaquinaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPersonagemJogadorMaquinaItemStateChanged
        limpaDefinicoesPersonagemMaquina();
        Personagem personagemSelecionado = (Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem();
        setComponentesJogadorMaquina(personagemSelecionado);
        if (partida.getTipoJogadorDaVez() == TipoJogador.Computador) {
            habilitarEDesabilitarComboCurar(personagemSelecionado, partida.getEquipeComputador());
            if (jRadioButtonCurar.isSelected()) {
                jRadioButtonCurarStateChanged(null);
            }
        }
    }//GEN-LAST:event_jComboBoxPersonagemJogadorMaquinaItemStateChanged

    private void jRadioButtonAtacarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonAtacarStateChanged
        // TODO add your handling code here:
        if (jRadioButtonAtacar.isSelected()) {
            jLabelX.setIcon(new ImageIcon(getClass().getResource("/imagens/Atacar.jpeg")));

            if (partida.getTipoJogadorDaVez().equals(TipoJogador.Humano)) {
                jLabelNomeEquipeJogadorMaquina.setText(partida.getEquipeComputador().getJogador().getNome());
                jLabelNomeEquipeJogadorMaquina.setForeground(Color.orange);
                jLabelEquipeJogadorMaquina.setForeground(Color.orange);

                setComboPersonagensJogadorMaquina(partida.getEquipeComputador().getPersonagens());
            }

            if (partida.getTipoJogadorDaVez().equals(TipoJogador.Computador)) {
                jLabelNomeEquipeJogadorHumano.setText(partida.getEquipeJogador().getJogador().getNome());
                jLabelNomeEquipeJogadorHumano.setForeground(Color.blue);
                jLabelEquipeJogadorHumano.setForeground(Color.blue);

                setComboPersonagensJogadorHumano(partida.getEquipeJogador().getPersonagens());
            }
        }
    }//GEN-LAST:event_jRadioButtonAtacarStateChanged

    private void jRadioButtonCurarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonCurarStateChanged
        if (jRadioButtonCurar.isSelected()) {
            jLabelX.setIcon(new ImageIcon(getClass().getResource("/imagens/Curar.png")));

            if (partida.getTipoJogadorDaVez().equals(TipoJogador.Humano)) {
                jLabelNomeEquipeJogadorMaquina.setText(partida.getEquipeJogador().getJogador().getNome());
                jLabelNomeEquipeJogadorMaquina.setForeground(Color.blue);
                jLabelEquipeJogadorMaquina.setForeground(Color.blue);

                jComboBoxPersonagemJogadorMaquina.removeAllItems();
                partida.getEquipeJogador().getPersonagens().stream().filter((personagem) -> (!personagem.equals((Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem()))).forEach((personagem) -> {
                    jComboBoxPersonagemJogadorMaquina.addItem(personagem);
                });
            } else {
                jLabelNomeEquipeJogadorHumano.setText(partida.getEquipeComputador().getJogador().getNome());
                jLabelNomeEquipeJogadorHumano.setForeground(Color.orange);
                jLabelEquipeJogadorHumano.setForeground(Color.orange);

                jComboBoxPersonagemJogadorHumano.removeAllItems();
                partida.getEquipeComputador().getPersonagens().stream().filter((personagem) -> (!personagem.equals((Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem()))).forEach((personagem) -> {
                    jComboBoxPersonagemJogadorHumano.addItem(personagem);
                });
            }
        }
    }//GEN-LAST:event_jRadioButtonCurarStateChanged

    private void jButtonJogarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButtonJogarKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            jogar();
        }
    }//GEN-LAST:event_jButtonJogarKeyPressed

    private void jButtonJogarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonJogarMouseClicked
        jogar();
    }//GEN-LAST:event_jButtonJogarMouseClicked

    private void jReiniciarJogoMiKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jReiniciarJogoMiKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            reiniciarJogo();
        }
    }//GEN-LAST:event_jReiniciarJogoMiKeyPressed

    private void jReiniciarJogoMiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jReiniciarJogoMiMouseClicked
        reiniciarJogo();
    }//GEN-LAST:event_jReiniciarJogoMiMouseClicked

    private void jReiniciarJogoMiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReiniciarJogoMiActionPerformed
        reiniciarJogo();
    }//GEN-LAST:event_jReiniciarJogoMiActionPerformed

    private void jSairMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSairMIActionPerformed
        sairJogo();
    }//GEN-LAST:event_jSairMIActionPerformed

    private void jSairMIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSairMIMouseClicked
        sairJogo();
    }//GEN-LAST:event_jSairMIMouseClicked

    private void jSairMIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSairMIKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            sairJogo();
        }
    }//GEN-LAST:event_jSairMIKeyPressed

    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="Funções">
    private void iniciarJogo() {
        limpaTela();
        jLabelTurnoComputador.setVisible(false);
        jLabelNomeEquipeJogadorHumano.setText(partida.getEquipeJogador().getJogador().getNome());
        jLabelNomeEquipeJogadorHumano.setForeground(Color.blue);
        jLabelEquipeJogadorHumano.setForeground(Color.blue);
        jLabelNomeEquipeJogadorMaquina.setText(partida.getEquipeComputador().getJogador().getNome());
        jLabelNomeEquipeJogadorMaquina.setForeground(Color.orange);
        jLabelEquipeJogadorMaquina.setForeground(Color.orange);

        jProgressBarHumano.setForeground(Color.blue);
        jProgressBarComputador.setForeground(Color.blue);
          
        this.setComboPersonagensJogadorHumano(this.partida.getEquipeJogador().getPersonagens());
        this.setComboPersonagensJogadorMaquina(this.partida.getEquipeComputador().getPersonagens());

        setComponentesJogadorHumano((Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem());
        setComponentesJogadorMaquina((Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem());

    }

    private void setAcaoParaExecutar(Personagem personagemSelecionado, Equipe equipeDaVez) {
        boolean bValor = true;
        if (personagemSelecionado != null) {
            habilitarEDesabilitarComboCurar(personagemSelecionado, equipeDaVez);
            if (equipeDaVez.getJogador().getTipo() == TipoJogador.Humano) {
                this.jRadioButtonAtacar.setSelected(bValor);
            } else {
                if (equipeDaVez.getPersonagens().size() == 1) {
                    this.jRadioButtonAtacar.setSelected(bValor);
                } else {
                    if (personagemSelecionado.getAlinhamento() == Alinhamento.Antagonista) {
                        this.jRadioButtonAtacar.setSelected(bValor);
                    } else {
                        if (utilitarios.Utilitarios.getRandomBoolean()) {
                            this.jRadioButtonAtacar.setSelected(bValor);
                        } else {
                            if (partida.getEquipeJogador().getPersonagens().size() == 1) {
                                this.jRadioButtonAtacar.setSelected(bValor);
                            } else {
                                this.jRadioButtonCurar.setSelected(bValor);
                            }
                        }
                    }
                }
            }
        }
    }

    private void setComboPersonagensJogadorHumano(ArrayList<Personagem> lstPersonagens) {
        jComboBoxPersonagemJogadorHumano.removeAllItems();
        lstPersonagens.stream().forEach((personagem) -> {
            jComboBoxPersonagemJogadorHumano.addItem(personagem);
        });
    }

    private void setComboPersonagensJogadorMaquina(ArrayList<Personagem> lstPersonagens) {
        jComboBoxPersonagemJogadorMaquina.removeAllItems();
        lstPersonagens.stream().forEach((personagem) -> {
            jComboBoxPersonagemJogadorMaquina.addItem(personagem);
        });
    }

    private void setComponentesJogadorHumano(Personagem personagem) {
        if (personagem != null) {
            limpaDefinicoesPersonagemHumano();
            jLabelAlinhamentoEquipeHumano.setText(personagem.getAlinhamento().toString());
            jLabelClasseEquipeHumano.setText(personagem.getClasse().toString());
            jLabelDanoEquipeHumano.setText(personagem.getDano().toString());
            jLabelResistenciaEquipeHumano.setText(personagem.getResistencia().toString());
            jLabelQtdeVidaEquipeHumano.setText(utilitarios.Utilitarios.formatarFloat(personagem.getQuantidadeVida()));
            jLabelImagemJogadorHumano.setIcon(new ImageIcon(getClass().getResource(personagem.getImagem())));
            jProgressBarHumano.setValue(personagem.getQuantidadeVidaPercentual());
            jProgressBarHumano.setString(personagem.getQuantidadeVidaPercentual().toString()+"%");
            jProgressBarHumano.setStringPainted(true);
            
            if ((personagem.getQuantidadeVidaPercentual() < 80) &&
                    (personagem.getQuantidadeVidaPercentual() >= 60)){
                jProgressBarHumano.setForeground(Color.green);
            } else if ((personagem.getQuantidadeVidaPercentual() < 60) &&
                    (personagem.getQuantidadeVidaPercentual() >= 40)) {
                jProgressBarHumano.setForeground(Color.yellow);
            } else if ((personagem.getQuantidadeVidaPercentual() < 40) &&
                    (personagem.getQuantidadeVidaPercentual() >= 20)) {
                jProgressBarHumano.setForeground(Color.orange);
            } else if (personagem.getQuantidadeVidaPercentual() < 20) {
                jProgressBarHumano.setForeground(Color.red);
            }
            
        }
    }

    private void setComponentesJogadorMaquina(Personagem personagem) {
        if (personagem != null) {
            limpaDefinicoesPersonagemMaquina();
            jLabelAlinhamentoEquipeMaquina.setText(personagem.getAlinhamento().toString());
            jLabelClasseEquipeMaquina.setText(personagem.getClasse().toString());
            jLabelDanoEquipeMaquina.setText(personagem.getDano().toString());
            jLabelResistenciaEquipeMaquina.setText(personagem.getResistencia().toString());
            jLabelQtdeVidaEquipeMaquina.setText(utilitarios.Utilitarios.formatarFloat(personagem.getQuantidadeVida()));
            jLabelImagemJogadorMaquina.setIcon(new ImageIcon(getClass().getResource(personagem.getImagem())));
            jProgressBarComputador.setValue(personagem.getQuantidadeVidaPercentual());
            jProgressBarComputador.setString(personagem.getQuantidadeVidaPercentual().toString()+"%");
            jProgressBarComputador.setStringPainted(true);
            
            if ((personagem.getQuantidadeVidaPercentual() < 80) &&
                    (personagem.getQuantidadeVidaPercentual() >= 60)){
                jProgressBarComputador.setForeground(Color.green);
            } else if ((personagem.getQuantidadeVidaPercentual() < 60) &&
                    (personagem.getQuantidadeVidaPercentual() >= 40)) {
                jProgressBarComputador.setForeground(Color.yellow);
            } else if ((personagem.getQuantidadeVidaPercentual() < 40) &&
                    (personagem.getQuantidadeVidaPercentual() >= 20)) {
                jProgressBarComputador.setForeground(Color.orange);
            } else if (personagem.getQuantidadeVidaPercentual() < 20) {
                jProgressBarComputador.setForeground(Color.red);
            }
            
        }
    }

    private void limpaTela() {
        limpaDefinicoesPersonagens();
        jComboBoxPersonagemJogadorHumano.removeAllItems();
        jComboBoxPersonagemJogadorMaquina.removeAllItems();
    }

    private void limpaDefinicoesPersonagens() {
        limpaDefinicoesPersonagemHumano();
        limpaDefinicoesPersonagemMaquina();
    }

    private void limpaDefinicoesPersonagemHumano() {
        jLabelAlinhamentoEquipeHumano.setText("");
        jLabelClasseEquipeHumano.setText("");
        jLabelDanoEquipeHumano.setText("");
        jLabelResistenciaEquipeHumano.setText("");
        jLabelQtdeVidaEquipeHumano.setText("");
        jLabelEquipeJogadorHumano.setIcon(null);
    }

    private void limpaDefinicoesPersonagemMaquina() {
        jLabelAlinhamentoEquipeMaquina.setText("");
        jLabelClasseEquipeMaquina.setText("");
        jLabelDanoEquipeMaquina.setText("");
        jLabelResistenciaEquipeMaquina.setText("");
        jLabelQtdeVidaEquipeMaquina.setText("");
        jLabelImagemJogadorMaquina.setIcon(null);
    }

    private void atualizarTela(Personagem personagemExecutor, Personagem personagemReceptor) {
        if (partida.getTipoJogadorDaVez() == TipoJogador.Humano) {
            this.setComponentesJogadorHumano(personagemExecutor);
            this.setComponentesJogadorMaquina(personagemReceptor);
        } else {
            this.setComponentesJogadorMaquina(personagemExecutor);
            this.setComponentesJogadorHumano(personagemReceptor);
        }
    }

    private void habilitarEDesabilitarCampos(boolean bValor) {
        jComboBoxPersonagemJogadorHumano.setEnabled(bValor);
        jComboBoxPersonagemJogadorMaquina.setEnabled(bValor);
        jRadioButtonAtacar.setEnabled(bValor);
        jRadioButtonCurar.setEnabled(bValor);
    }

    private void habilitarEDesabilitarComboCurar(Personagem personagemSelecionado, Equipe equipeDaVez) {
        if (personagemSelecionado != null) {
            if (equipeDaVez.getPersonagens().size() == 1) {
                this.jRadioButtonCurar.setEnabled(false);
            } else {
                if (personagemSelecionado.getAlinhamento() == Alinhamento.Antagonista) {
                    this.jRadioButtonCurar.setEnabled(false);
                } else {
                    this.jRadioButtonCurar.setEnabled(true);
                }
            }
        }
    }

    private void reiniciarJogo() {
        Integer opcaoReiniciaJogo
                = JOptionPane.showConfirmDialog(null, "Deseja reiniciar o jogo?", "Atenção",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcaoReiniciaJogo == 0) {
            fecharTela();
            Jogador jogador = partida.getEquipeJogador().getJogador();
            TelaSelecionaEquipe telaSelecionaEquipe = new TelaSelecionaEquipe(jogador);
            telaSelecionaEquipe.setLocationRelativeTo(null);
            telaSelecionaEquipe.setVisible(true);
        }
    }

    private void fecharTela() {
        this.dispose();
    }

    private void sairJogo() {
        Integer opcaoReiniciaJogo
                = JOptionPane.showConfirmDialog(null, "Deseja sair do jogo?", "Atenção",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (opcaoReiniciaJogo == 0) {
            this.fecharTela();
        }
    }

    private void jogar() {
        if (partida.getTipoJogadorDaVez().equals(TipoJogador.Computador)) {
            efetividade = utilitarios.Utilitarios.getRandomEfetividade();
            jogarTurnoJogadorMaquina();
        } else {
            efetividade = utilitarios.Utilitarios.getRandomEfetividade();
            jogarTurnoJogadorHumano();
        }
    }

    private void preparaTurnoHumano() {
        habilitarEDesabilitarCampos(true);
        jLabelTurnoJogador.setVisible(true);
        jLabelTurnoComputador.setVisible(false);
        iniciarJogo();
        Personagem personagemExecutorHumano;
        personagemExecutorHumano = ((Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem());
        setAcaoParaExecutar(personagemExecutorHumano, partida.getEquipeJogador());
    }

    private void preparaTurnoMaquina() {
        iniciarJogo();
        jLabelTurnoJogador.setVisible(false);
        jLabelTurnoComputador.setVisible(true);
        Personagem personagemExecutorMaquina = partida.getEquipeComputador().getPersonagemRandom();
        Personagem personagemReceptorMaquina;
        setAcaoParaExecutar(personagemExecutorMaquina, partida.getEquipeComputador());
        if (jRadioButtonAtacar.isSelected()) {
            personagemReceptorMaquina = partida.getEquipeJogador().getPersonagemRandom();
        } else {
            personagemReceptorMaquina = partida.getEquipeComputador().getPersonagemRandom();
        }

        habilitarEDesabilitarCampos(false);

        jComboBoxPersonagemJogadorMaquina.setSelectedItem(personagemExecutorMaquina);
        jComboBoxPersonagemJogadorHumano.setSelectedItem(personagemReceptorMaquina);
        setComponentesJogadorMaquina(personagemExecutorMaquina);
        setComponentesJogadorHumano(personagemReceptorMaquina);

        jRadioButtonCurar.setEnabled(false);
    }

    private void jogarTurnoJogadorHumano() {
        if (partida.fimDaPartida()) {
            finalizarJogo();
        } else {
            String saida;
            boolean bPersonagemMorreu;
            Personagem personagemExecutor = (Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem();
            Personagem personagemReceptor;
            if (jRadioButtonAtacar.isSelected()) {
                personagemReceptor = (Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem();
                saida = personagemExecutor.atacar(personagemReceptor, efetividade);
                bPersonagemMorreu = partida.verificaPersonagemMorto(personagemReceptor, partida.getEquipeComputador().getPersonagens(), saida);
                if (bPersonagemMorreu) {
                    this.setComboPersonagensJogadorMaquina(partida.getEquipeComputador().getPersonagens());
                    this.setComponentesJogadorMaquina((Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem());
                }
                String textoAnterior = jTextAreaLog.getText();

                jTextAreaLog.setText(textoAnterior + "Equipe " + partida.getEquipeComputador().getJogador().getNome() + ": " + saida);
            } else {
                personagemReceptor = (Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem();
                Protagonista protagonistaExecutor = ((Protagonista) personagemExecutor);
                saida = protagonistaExecutor.incrementarVida(personagemReceptor, efetividade);
                String textoAnterior = jTextAreaLog.getText();
                jTextAreaLog.setText(textoAnterior + "Equipe " + partida.getEquipeJogador().getJogador().getNome() + ": " + saida);
            }

            this.atualizarTela(personagemExecutor, personagemReceptor);

            if (!partida.fimDaPartida()) {
                partida.getProximoAJogar();
                preparaTurnoMaquina();
            } else {
                finalizarJogo();
            }

        }
    }

    private void jogarTurnoJogadorMaquina() {
        if (partida.fimDaPartida()) {
            finalizarJogo();
        } else {
            String saida;
            boolean bPersonagemMorreu;
            Personagem personagemExecutor = ((Personagem) jComboBoxPersonagemJogadorMaquina.getSelectedItem());
            Personagem personagemReceptor;

            if (jRadioButtonAtacar.isSelected()) {
                personagemReceptor = ((Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem());
                saida = personagemExecutor.atacar(personagemReceptor, efetividade);
                bPersonagemMorreu = partida.verificaPersonagemMorto(personagemReceptor, partida.getEquipeJogador().getPersonagens(), saida);
                if (bPersonagemMorreu) {
                    this.setComboPersonagensJogadorHumano(partida.getEquipeJogador().getPersonagens());
                    this.setComponentesJogadorHumano((Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem());
                }
                String textoAnterior = jTextAreaLog.getText();
                jTextAreaLog.setText(textoAnterior + "Equipe " + partida.getEquipeJogador().getJogador().getNome() + ": " + saida);
            } else {
                Protagonista protagonistaExecutor = ((Protagonista) personagemExecutor);
                personagemReceptor = (Personagem) jComboBoxPersonagemJogadorHumano.getSelectedItem();
                saida = protagonistaExecutor.incrementarVida(personagemReceptor, efetividade);
                String textoAnterior = jTextAreaLog.getText();
                jTextAreaLog.setText(textoAnterior + "Equipe " + partida.getEquipeComputador().getJogador().getNome() + ": " + saida);
            }

            this.atualizarTela(personagemExecutor, personagemReceptor);

            if (!partida.fimDaPartida()) {
                partida.getProximoAJogar();
                preparaTurnoHumano();
            } else {
                finalizarJogo();
            }
        }
    }

    private void finalizarJogo() {
        jButtonJogar.setEnabled(false);
        jButtonJogar.setVisible(false);
        habilitarEDesabilitarCampos(false);
        String saida = partida.getJogadorGanhador().getNome() + " venceu o jogo!!!";
        String textoAnterior = jTextAreaLog.getText();
        jTextAreaLog.setText(textoAnterior + saida);
        JOptionPane.showMessageDialog(null, saida, "Game DC Heroes - Vencedor", JOptionPane.INFORMATION_MESSAGE, null);
        Integer opcaoFinal = JOptionPane.showConfirmDialog(null, "Deseja gravar o log do jogo?",
                "Atenção", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);

        if (opcaoFinal == 0) {
            String location = System.getProperty("user.dir");
            partida.gravarArquivo(jTextAreaLog.getText(), location);
        }
    }

    //</editor-fold>

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupJogar;
    private javax.swing.JButton jButtonJogar;
    private javax.swing.JComboBox jComboBoxPersonagemJogadorHumano;
    private javax.swing.JComboBox jComboBoxPersonagemJogadorMaquina;
    private javax.swing.JLabel jLabelAlinhamentoEquipeHumano;
    private javax.swing.JLabel jLabelAlinhamentoEquipeMaquina;
    private javax.swing.JLabel jLabelClasseEquipeHumano;
    private javax.swing.JLabel jLabelClasseEquipeMaquina;
    private javax.swing.JLabel jLabelDanoEquipeHumano;
    private javax.swing.JLabel jLabelDanoEquipeMaquina;
    private javax.swing.JLabel jLabelEquipeJogadorHumano;
    private javax.swing.JLabel jLabelEquipeJogadorMaquina;
    private javax.swing.JLabel jLabelImagemJogadorHumano;
    private javax.swing.JLabel jLabelImagemJogadorMaquina;
    private javax.swing.JLabel jLabelNomeEquipeJogadorHumano;
    private javax.swing.JLabel jLabelNomeEquipeJogadorMaquina;
    private javax.swing.JLabel jLabelQtdeVidaEquipeHumano;
    private javax.swing.JLabel jLabelQtdeVidaEquipeMaquina;
    private javax.swing.JLabel jLabelResistenciaEquipeHumano;
    private javax.swing.JLabel jLabelResistenciaEquipeMaquina;
    private javax.swing.JLabel jLabelTextoAlinhamentoEquipeHumano;
    private javax.swing.JLabel jLabelTextoAlinhamentoEquipeMaquina;
    private javax.swing.JLabel jLabelTextoClasseEquipeHumano;
    private javax.swing.JLabel jLabelTextoClasseEquipeMaquina;
    private javax.swing.JLabel jLabelTextoDanoEquipeHumano;
    private javax.swing.JLabel jLabelTextoDanoEquipeMaquina;
    private javax.swing.JLabel jLabelTextoQtdeVidaEquipeHumano;
    private javax.swing.JLabel jLabelTextoQtdeVidaEquipeMaquina;
    private javax.swing.JLabel jLabelTextoResistenciaEquipeHumano;
    private javax.swing.JLabel jLabelTextoResistenciaEquipeMaquina;
    private javax.swing.JLabel jLabelTurnoComputador;
    private javax.swing.JLabel jLabelTurnoJogador;
    private javax.swing.JLabel jLabelX;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBarOpcoes;
    private javax.swing.JProgressBar jProgressBarComputador;
    private javax.swing.JProgressBar jProgressBarHumano;
    private javax.swing.JRadioButton jRadioButtonAtacar;
    private javax.swing.JRadioButton jRadioButtonCurar;
    private javax.swing.JMenuItem jReiniciarJogoMi;
    private javax.swing.JMenuItem jSairMI;
    private javax.swing.JScrollPane jScrollPaneLog;
    private javax.swing.JPopupMenu.Separator jSeparator;
    private javax.swing.JSeparator jSeparatorSuperior;
    private javax.swing.JTextArea jTextAreaLog;
    // End of variables declaration//GEN-END:variables

}
